--= CONFIGURAÇÃO INICIAL =--
local mon = peripheral.find("monitor")
if not mon then error("Conecte um monitor!") end

mon.setTextScale(0.5)
local w, h = mon.getSize()
local centerX, centerY = math.floor(w/2), math.floor(h/2)

--= SISTEMA DE EMOÇÕES PROFUNDAS =--
local EMOTIONS = {
    NORMAL = {
        blink = 0.003,
        duration = {20, 30}, -- em segundos
        iris = {color="rainbow", size=3.5},
        sclera = {color=colors.white, redness=0},
        effects = {
            bg="none",
            particles={type="none", intensity=0}
        }
    },
    TRISTE = {
        blink = 0.01,
        duration = {25, 35},
        iris = {color=colors.blue, size=4.2},
        sclera = {color=colors.lightBlue, redness=0.1},
        effects = {
            bg="fog",
            particles={type="tears", intensity=0.7}
        },
        sobrancelhas = {angle=-15, thickness=2}
    },
    CHORANDO = {
        blink = 0.005,
        duration = {30, 45},
        iris = {color=colors.blue, size=4.5},
        sclera = {color=colors.lightBlue, redness=0.3},
        effects = {
            bg="storm",
            particles={type="waterfall", intensity=1.0}
        },
        sobrancelhas = {angle=-30, thickness=3}
    },
    EMBRIAGADO = {
        blink = 0.02,
        duration = {40, 60},
        iris = {color="swirling", size=3.8},
        sclera = {color=colors.red, redness=0.6},
        effects = {
            bg="spiral",
            particles={type="floaters", intensity=0.8}
        },
        movement = {sway=0.3, lag=0.7}
    },
    ALUCINANDO = {
        blink = 0.001,
        duration = {45, 70},
        iris = {color="fractal", size=5},
        sclera = {color=colors.purple, redness=0.2},
        effects = {
            bg="kaleidoscope",
            particles={type="patterns", intensity=1.2}
        }
    }
}

--= SISTEMA DE PARTÍCULAS AVANÇADO =--
local PARTICLES = {
    tears = {
        count = 150,
        colors = {
            {color=colors.blue, weight=6},
            {color=colors.lightBlue, weight=3},
            {color=colors.cyan, weight=1}
        },
        sizes = {1, 4},
        speeds = {1.5, 3.5},
        spawnRate = {0.5, 1.5} -- por segundo
    },
    floaters = {
        count = 80,
        shapes = {"circle", "square", "triangle"},
        colors = {colors.green, colors.yellow, colors.pink},
        sizes = {1, 3},
        speeds = {0.2, 0.8}
    }
}

--= ESTADO DO OLHO =--
local eye = {
    emotion = "NORMAL",
    timer = 0,
    blink = {progress=0, target=0},
    look = {x=0, y=0, targetX=0, targetY=0},
    particles = {},
    physics = {
        sway = {x=0, y=0},
        wobble = 0
    },
    effects = {
        bg = {},
        overlay = {}
    },
    state = {
        redness = 0,
        waterLevel = 0,
        sobrancelhas = {angle=0, thickness=1}
    }
}

--= INICIALIZAÇÃO =--
local function initParticles()
    -- Sistema de lágrimas realistas
    eye.particles.tears = {}
    for i = 1, PARTICLES.tears.count do
        eye.particles.tears[i] = {
            active = false,
            x = 0, y = 0,
            size = 1,
            speed = 1,
            color = colors.blue,
            life = 0
        }
    end
    
    -- Floaters para embriaguez
    eye.particles.floaters = {}
    for i = 1, PARTICLES.floaters.count do
        eye.particles.floaters[i] = {
            x = math.random(-w, w),
            y = math.random(-h, h),
            shape = PARTICLES.floaters.shapes[math.random(#PARTICLES.floaters.shapes)],
            color = PARTICLES.floaters.colors[math.random(#PARTICLES.floaters.colors)],
            size = math.random(PARTICLES.floaters.sizes[1], PARTICLES.floaters.sizes[2]),
            speed = math.random(PARTICLES.floaters.speeds[1], PARTICLES.floaters.speeds[2])
        }
    end
end

initParticles()

--= SISTEMA DE DESENHO AVANÇADO =--
local function drawPixel(x, y, color)
    mon.setBackgroundColor(color)
    mon.setCursorPos(centerX + x, centerY + y)
    mon.write(" ")
end

local function drawEllipse(x, y, rx, ry, color)
    for dy = -ry, ry do
        for dx = -rx, rx do
            if (dx*dx)/(rx*rx) + (dy*dy)/(ry*ry) <= 1 then
                drawPixel(x + dx, y + dy, color)
            end
        end
    end
end

--= EFEITOS DE CHORO REALISTA =--
local function updateTears(dt)
    local e = EMOTIONS[eye.emotion]
    if not e.effects.particles.type:find("tear") then return end
    
    local intensity = e.effects.particles.intensity
    local spawnRate = lerp(PARTICLES.tears.spawnRate[1], PARTICLES.tears.spawnRate[2], intensity)
    
    -- Atualizar lágrimas existentes
    for _, tear in ipairs(eye.particles.tears) do
        if tear.active then
            tear.y = tear.y + tear.speed * dt * 60
            tear.life = tear.life - dt
            if tear.y > h/2 or tear.life <= 0 then
                tear.active = false
            end
        end
    end
    
    -- Gerar novas lágrimas
    if math.random() < spawnRate * dt then
        for _, tear in ipairs(eye.particles.tears) do
            if not tear.active then
                tear.active = true
                tear.x = math.random(-25, 25)
                tear.y = -15 - math.random(5)
                tear.size = math.random(PARTICLES.tears.sizes[1], PARTICLES.tears.sizes[2])
                tear.speed = math.random(PARTICLES.tears.speeds[1], PARTICLES.tears.speeds[2]) * intensity
                tear.life = math.random(2, 5)
                
                -- Escolher cor baseada no peso
                local r = math.random(10)
                local sum = 0
                for _, c in ipairs(PARTICLES.tears.colors) do
                    sum = sum + c.weight
                    if r <= sum then
                        tear.color = c.color
                        break
                    end
                end
                
                break
            end
        end
    end
end

local function drawTears()
    local e = EMOTIONS[eye.emotion]
    if not e.effects.particles.type:find("tear") then return end
    
    for _, tear in ipairs(eye.particles.tears) do
        if tear.active then
            -- Desenhar lágrima principal
            drawPixel(tear.x, tear.y, tear.color)
            
            -- Efeito de cauda
            for i = 1, tear.size do
                local a = 0.7 - (i * 0.2)
                if a > 0 then
                    drawPixel(tear.x, tear.y - i, tear.color)
                end
            end
            
            -- Reflexo na lágrima
            if math.random() < 0.3 then
                drawPixel(tear.x + math.random(-1,1), tear.y, colors.white)
            end
        end
    end
    
    -- Olho marejado
    if e.effects.particles.intensity > 0.5 then
        for y = -10, -5 do
            for x = -20, 20 do
                if math.random() < 0.02 * e.effects.particles.intensity then
                    drawPixel(x, y, colors.lightBlue)
                end
            end
        end
    end
end

--= EFEITOS DE EMBRIAGUEZ/ALUCINAÇÃO =--
local function updateFloat(dt)
    if eye.emotion ~= "EMBRIAGADO" and eye.emotion ~= "ALUCINANDO" then return end
    
    for _, floater in ipairs(eye.particles.floaters) do
        -- Movimento flutuante irregular
        floater.x = floater.x + math.random() * 0.5 - 0.25
        floater.y = floater.y + floater.speed
        
        -- Reaparecer no topo quando sair da tela
        if floater.y > h/2 + 5 then
            floater.y = -h/2 - 5
            floater.x = math.random(-w/2, w/2)
        end
    end
end

local function drawFloat()
    if eye.emotion ~= "EMBRIAGADO" and eye.emotion ~= "ALUCINANDO" then return end
    
    for _, floater in ipairs(eye.particles.floaters) do
        local dist = math.sqrt(floater.x^2 + floater.y^2)
        if dist > w/3 then  -- Manter nas bordas
            if floater.shape == "circle" then
                drawEllipse(floater.x, floater.y, floater.size, floater.size, floater.color)
            else
                -- Desenhar outras formas
                for dy = -floater.size, floater.size do
                    for dx = -floater.size, floater.size do
                        if (floater.shape == "square") or 
                           (floater.shape == "triangle" and dy <= dx) then
                            drawPixel(floater.x + dx, floater.y + dy, floater.color)
                        end
                    end
                end
            end
        end
    end
end

--= SISTEMA DE EFEITOS AO REDOR =--
local BG_EFFECTS = {
    none = {
        update = function() end,
        draw = function() end
    },
    spiral = {
        angle = 0,
        update = function(self, dt)
            self.angle = (self.angle + 0.5 * dt) % (math.pi * 2)
        end,
        draw = function(self)
            local layers = 5
            local maxRadius = math.max(w,h)/2 + 10
            
            for l = 1, layers do
                local radius = maxRadius - l * 2
                local steps = radius * 2
                local color = ({colors.purple, colors.magenta, colors.pink})[l % 3 + 1]
                
                for i = 0, steps do
                    local a = self.angle + (i/steps) * math.pi * 2
                    local x = math.floor(math.cos(a) * radius)
                    local y = math.floor(math.sin(a) * radius)
                    
                    if i % (3 + l) == 0 then
                        drawPixel(x, y, color)
                    end
                end
            end
        end
    },
    kaleidoscope = {
        time = 0,
        update = function(self, dt)
            self.time = self.time + dt
        end,
        draw = function(self)
            local segments = 12
            local maxRadius = math.max(w,h)/2 + 8
            
            for r = maxRadius, maxRadius - 10, -1 do
                for s = 0, segments - 1 do
                    local a1 = math.pi * 2 * (s/segments) + self.time
                    local a2 = math.pi * 2 * ((s+1)/segments) + self.time
                    
                    local color = ({colors.pink, colors.magenta, colors.purple})[s % 3 + 1]
                    
                    for i = 0, 3 do
                        local a = a1 + (a2 - a1) * (i/3)
                        local x = math.floor(math.cos(a) * r)
                        local y = math.floor(math.sin(a) * r)
                        drawPixel(x, y, color)
                    end
                end
            end
        end
    }
}

--= LOOP PRINCIPAL =--
local lastTime = os.epoch("utc")
while true do
    local currentTime = os.epoch("utc")
    local deltaTime = (currentTime - lastTime) / 1000  -- em segundos
    lastTime = currentTime
    
    mon.setBackgroundColor(colors.black)
    mon.clear()
    
    -- Atualizar sistemas
    updateTears(deltaTime)
    updateFloat(deltaTime)
    
    
    -- Desenhar efeitos de fundo
    eye.effects.bg:draw()
    
    -- Desenhar olho principal
    drawEye()
    
    -- Desenhar partículas
    drawTears()
    drawFloat()
    
    sleep(0.05)  -- ~20 FPS
end
