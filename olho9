local mon
for _, nome in ipairs(peripheral.getNames()) do
  if peripheral.getType(nome) == "monitor" then
    mon = peripheral.wrap(nome)
    break
  end
end

if not mon then
  print("Nenhum monitor encontrado!")
  return
end

mon.setTextScale(0.5)
local w, h = mon.getSize()
local cx, cy = math.floor(w / 2), math.floor(h / 2)

local cores = {
  colors.red, colors.orange, colors.yellow,
  colors.lime, colors.green, colors.blue,
  colors.cyan, colors.purple, colors.pink, colors.magenta
}

local posicoes = {
  {x = 0, y = 0}, {x = -6, y = 0}, {x = 6, y = 0},
  {x = 0, y = -4}, {x = 0, y = 4},
  {x = -4, y = -2}, {x = 4, y = -2},
  {x = -4, y = 2}, {x = 4, y = 2}
}

-- Variáveis para lágrimas
local lagrimas_colunas = {}
local lagrimas_alturas = {}
local lagrimas_pos = {}
local lagrimas_max_altura = h - 1

-- Preencher colunas para várias lágrimas
local startX = cx - 20
for i = 1, 10 do
  lagrimas_colunas[i] = startX + (i * 4)
  lagrimas_alturas[i] = cy + 14 + math.random(0, 2)
  lagrimas_pos[i] = math.random(0, 8)
end

local tremendo = false
local tremor_timer = 0

local function desenharOlho(offsetX, offsetY, cor, emoc, tremorDeslocX, tremorDeslocY)
  tremorDeslocX = tremorDeslocX or 0
  tremorDeslocY = tremorDeslocY or 0

  mon.setBackgroundColor(colors.black)
  mon.clear()

  local baseX = cx + tremorDeslocX
  local baseY = cy + tremorDeslocY

  -- Esclera com faixa vermelha na parte inferior (vermelhidão suave)
  for y = -14, 14 do
    for x = -26, 26 do
      if (x * x) / 676 + (y * y) / 196 <= 1 then
        mon.setCursorPos(baseX + x, baseY + y)
        if y >= 8 and y <= 14 then
          -- Vermelhidão sutil na faixa inferior
          mon.setBackgroundColor(colors.red)
        else
          mon.setBackgroundColor(colors.white)
        end
        mon.write(" ")
      end
    end
  end

  -- Íris
  for y = -8, 8 do
    for x = -12, 12 do
      if (x * x) / 144 + (y * y) / 64 <= 1 then
        mon.setCursorPos(baseX + x + offsetX, baseY + y + offsetY)
        mon.setBackgroundColor(cor)
        mon.write(" ")
      end
    end
  end

  -- Pupila
  for y = -2, 2 do
    for x = -2, 2 do
      mon.setCursorPos(baseX + x + offsetX, baseY + y + offsetY)
      mon.setBackgroundColor(colors.black)
      mon.write(" ")
    end
  end

  -- Emoções específicas
  if emoc == "bravo" then
    -- Sobrancelhas franzidas
    for x = -20, 20 do
      mon.setCursorPos(baseX + x, baseY - 12)
      mon.setBackgroundColor(colors.black)
      mon.write(" ")
    end
    
    -- Olho mais estreito
    for y = -14, 14 do
      for x = -26, 26 do
        if (x * x) / 900 + (y * y) / 225 <= 1 then -- Forma mais estreita
          mon.setCursorPos(baseX + x, baseY + y)
          mon.setBackgroundColor(colors.red)
          mon.write(" ")
        end
      end
    end
    
  elseif emoc == "triste" then
    -- Sobrancelhas arqueadas
    for i = -20, 20 do
      local altura = math.floor(2 * math.sin(i/10)) - 14
      mon.setCursorPos(baseX + i, baseY + altura)
      mon.setBackgroundColor(colors.black)
      mon.write(" ")
    end
    
    -- Desenha lágrimas escorrendo em múltiplas colunas
    for i = 1, #lagrimas_colunas do
      local col = lagrimas_colunas[i] + tremorDeslocX
      local baseY_lagrima = lagrimas_alturas[i] + lagrimas_pos[i] + tremorDeslocY

      if baseY_lagrima <= h then
        mon.setCursorPos(col, baseY_lagrima)
        mon.setBackgroundColor(colors.cyan)
        mon.write(" ")
      end

      -- Efeito de lágrima mais realista
      if baseY_lagrima + 1 <= h then
        mon.setCursorPos(col, baseY_lagrima + 1)
        mon.setBackgroundColor(colors.lightBlue)
        mon.write(" ")
      end
    end
    
  elseif emoc == "assustado" then
    -- Olho totalmente aberto (maior)
    for y = -16, 16 do
      for x = -30, 30 do
        if (x * x) / 900 + (y * y) / 256 <= 1 then
          mon.setCursorPos(baseX + x, baseY + y)
          mon.setBackgroundColor(colors.white)
          mon.write(" ")
        end
      end
    end
    
    -- Pupila menor (efeito de medo)
    for y = -1, 1 do
      for x = -1, 1 do
        mon.setCursorPos(baseX + x + offsetX, baseY + y + offsetY)
        mon.setBackgroundColor(colors.black)
        mon.write(" ")
      end
    end
  end
end

local function escolherEmocao()
  local chance = math.random()
  if chance < 0.07 then -- Aumentei a chance de mudança de emoção
    local emos = {"bravo", "triste", "assustado"}
    return emos[math.random(#emos)]
  end
  return nil
end

local emoc_atual = nil
local emoc_timer = 0

while true do
  if emoc_atual then
    emoc_timer = emoc_timer - 1
    if emoc_timer <= 0 then
      emoc_atual = nil
      tremendo = false
    end
  else
    emoc_atual = escolherEmocao()
    if emoc_atual then
      emoc_timer = 30 + math.random(10)
      tremendo = (emoc_atual == "bravo" or emoc_atual == "assustado")
      tremor_timer = 0
    end
  end

  local pupila = posicoes[math.random(#posicoes)]
  local cor = cores[math.random(#cores)]

  local tremorX, tremorY = 0, 0
  if tremendo then
    tremor_timer = tremor_timer + 1
    if tremor_timer <= 12 then
      tremorX = math.random(-2, 2) -- Tremor mais intenso
      tremorY = math.random(-2, 2)
    else
      tremendo = false
    end
  end

  desenharOlho(pupila.x, pupila.y, cor, emoc_atual, tremorX, tremorY)

  if emoc_atual == "triste" then
    for i = 1, #lagrimas_pos do
      lagrimas_pos[i] = lagrimas_pos[i] + 1
      if lagrimas_pos[i] > lagrimas_max_altura then
        lagrimas_pos[i] = 0
        lagrimas_alturas[i] = cy + 14 + math.random(0, 2)
      end
    end
  end

  sleep(0.2) -- Reduzi o tempo de sleep para animação mais fluida
end
