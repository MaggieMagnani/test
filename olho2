-- Olho Emocional Premium Corrigido
-- Versão 1.1 - Com tratamento de erros e otimizações

local mon = peripheral.find("monitor") or peripheral.find("advanced_monitor")
if not mon then
    print("Nenhum monitor encontrado!")
    return
end

mon.setTextScale(0.5)
local w, h = mon.getSize()
local centerX, centerY = math.floor(w / 2), math.floor(h / 2)

-- Configurações com verificações de segurança
local settings = {
    colors = {
        colors.white, colors.orange, colors.magenta, colors.lime,
        colors.cyan, colors.pink, colors.yellow, colors.green,
        colors.purple, colors.blue, colors.red, colors.brown
    },
    
    emotions = {
        NORMAL = {blink=0.005, duration=200, bgEffect="none"},
        ANGRY = {blink=0.01, duration=300, bgEffect="pulseRed", veins=true},
        STRESSED = {blink=0.02, duration=250, bgEffect="flicker"},
        SCARED = {blink=0.03, duration=280, bgEffect="static", pupilDilation=0.7},
        SAD = {blink=0.015, duration=350, bgEffect="rain", tearful=true},
        CRYING = {blink=0.008, duration=400, bgEffect="heavyRain", tearful=true}
    },
    
    bgEffects = {
        none = {update=function() end, draw=function() end},
        pulseRed = {
            intensity = 0,
            update = function(self)
                self.intensity = (self.intensity + 0.05) % (math.pi * 2)
            end,
            draw = function(self)
                local pulse = math.floor((math.sin(self.intensity) + 1) * 3)
                for y = -h/2, h/2 do
                    for x = -w/2, w/2 do
                        local dist = math.sqrt(x*x + y*y)
                        if dist > math.max(w,h)/2 + 2 and dist < math.max(w,h)/2 + 2 + pulse then
                            mon.setBackgroundColor(colors.red)
                            mon.setCursorPos(centerX + x, centerY + y)
                            mon.write(" ")
                        end
                    end
                end
            end
        },
        flicker = {
            timer = 0,
            update = function(self)
                self.timer = self.timer + 1
            end,
            draw = function(self)
                if self.timer % 5 < 2 then
                    for y = -h/2, h/2 do
                        for x = -w/2, w/2 do
                            local dist = math.sqrt(x*x + y*y)
                            if dist > math.max(w,h)/2 + 1 and dist < math.max(w,h)/2 + 4 then
                                mon.setBackgroundColor(colors.yellow)
                                mon.setCursorPos(centerX + x, centerY + y)
                                mon.write(" ")
                            end
                        end
                    end
                end
            end
        },
        static = {
            noise = {},
            update = function(self)
                for i = 1, 50 do
                    self.noise[i] = {
                        x = math.random(-w, w),
                        y = math.random(-h, h),
                        life = math.random(1, 3)
                    }
                end
            end,
            draw = function(self)
                for _, dot in ipairs(self.noise) do
                    local dist = math.sqrt(dot.x*dot.x + dot.y*dot.y)
                    if dist > math.max(w,h)/2 + 1 and dist < math.max(w,h)/2 + 5 then
                        mon.setBackgroundColor(colors.gray)
                        mon.setCursorPos(centerX + dot.x, centerY + dot.y)
                        mon.write(" ")
                    end
                end
            end
        },
        rain = {
            drops = {},
            update = function(self)
                for i = 1, 30 do
                    if not self.drops[i] or self.drops[i].y > h/2 + 5 then
                        self.drops[i] = {
                            x = math.random(-w, w),
                            y = -h/2 - 5,
                            speed = math.random(2, 5)
                        }
                    else
                        self.drops[i].y = self.drops[i].y + self.drops[i].speed
                    end
                end
            end,
            draw = function(self)
                for _, drop in ipairs(self.drops) do
                    local dist = math.sqrt(drop.x*drop.x + drop.y*drop.y)
                    if dist > math.max(w,h)/2 + 1 and dist < math.max(w,h)/2 + 5 then
                        mon.setBackgroundColor(colors.blue)
                        mon.setCursorPos(centerX + drop.x, centerY + drop.y)
                        mon.write(" ")
                    end
                end
            end
        },
        heavyRain = {
            drops = {},
            update = function(self)
                for i = 1, 80 do
                    if not self.drops[i] or self.drops[i].y > h/2 + 5 then
                        self.drops[i] = {
                            x = math.random(-w, w),
                            y = -h/2 - 5,
                            speed = math.random(3, 7),
                            size = math.random(1, 2)
                        }
                    else
                        self.drops[i].y = self.drops[i].y + self.drops[i].speed
                    end
                end
            end,
            draw = function(self)
                for _, drop in ipairs(self.drops) do
                    local dist = math.sqrt(drop.x*drop.x + drop.y*drop.y)
                    if dist > math.max(w,h)/2 + 1 and dist < math.max(w,h)/2 + 5 then
                        for i = 0, drop.size do
                            mon.setBackgroundColor(i==0 and colors.lightBlue or colors.blue)
                            mon.setCursorPos(centerX + drop.x, centerY + drop.y + i)
                            mon.write(" ")
                        end
                    end
                end
            end
        }
    }
}

-- Estado do olho com inicialização segura
local eye = {
    emotion = "NORMAL",
    timer = 0,
    colorIndex = 1,
    blink = 0,
    lookX = 0,
    lookY = 0,
    tears = {},
    veins = {},
    psychoEffect = 0,
    waterLevel = 0,
    currentBgEffect = settings.bgEffects.none
}

-- Função segura para acessar configurações
local function getSafeSetting(path, default)
    local current = settings
    for part in path:gmatch("[^.]+") do
        current = current[part]
        if not current then return default end
    end
    return current or default
end

-- Inicializar partículas com verificação
for i = 1, 100 do
    eye.tears[i] = {
        x = math.random(-35, 35),
        y = math.random(-25, 25),
        speed = math.random(1, 4),
        size = math.random(1, 3),
        active = false,
        bright = math.random() < 0.3
    }
end

for i = 1, 50 do
    eye.veins[i] = {
        x1 = math.random(-28, 28),
        y1 = math.random(-18, 18),
        x2 = math.random(-28, 28),
        y2 = math.random(-18, 18),
        width = math.random(1, 3)
    }
end

-- Funções auxiliares com tratamento de erros
local function setEmotion(newEmotion)
    if not settings.emotions[newEmotion] then
        newEmotion = "NORMAL"
    end
    
    eye.emotion = newEmotion
    eye.timer = settings.emotions[newEmotion].duration or 200
    eye.currentBgEffect = settings.bgEffects[settings.emotions[newEmotion].bgEffect or settings.bgEffects.none
    if eye.currentBgEffect.update then
        eye.currentBgEffect:update()
    end
end

local function drawSclera()
    local eyeOpen = 1 - eye.blink
    local eyeWidth = math.floor(30 * eyeOpen)
    local eyeHeight = math.floor(20 * eyeOpen)

    for y = -eyeHeight, eyeHeight do
        for x = -eyeWidth, eyeWidth do
            if (x*x)/(eyeWidth*eyeWidth) + (y*y)/(eyeHeight*eyeHeight) <= 1 then
                local c = colors.white
                
                if eye.emotion == "ANGRY" and math.random() < 0.4 then
                    c = colors.red
                elseif eye.emotion == "SCARED" then
                    c = math.random() < 0.3 and colors.white or colors.lightGray
                elseif (eye.emotion == "SAD" or eye.emotion == "CRYING") and math.random() < 0.1 then
                    c = colors.lightBlue
                end
                
                if mon and mon.setBackgroundColor and mon.setCursorPos and mon.write then
                    mon.setBackgroundColor(c)
                    mon.setCursorPos(centerX + x, centerY + y)
                    mon.write(" ")
                end
            end
        end
    end

    if settings.emotions[eye.emotion].veins then
        for _, v in ipairs(eye.veins) do
            local steps = math.max(math.abs(v.x2 - v.x1), math.abs(v.y2 - v.y1))
            for i = 0, steps do
                local x = v.x1 + (v.x2 - v.x1) * i / steps
                local y = v.y1 + (v.y2 - v.y1) * i / steps
                if (x*x)/(eyeWidth*eyeWidth) + (y*y)/(eyeHeight*eyeHeight) <= 1 then
                    if mon and mon.setBackgroundColor and mon.setCursorPos and mon.write then
                        mon.setBackgroundColor(colors.red)
                        mon.setCursorPos(centerX + math.floor(x), centerY + math.floor(y))
                        mon.write(" ")
                    end
                end
            end
        end
    end
end

local function drawIris()
    if eye.blink > 0.7 then return end

    local irisColor = settings.colors[eye.colorIndex] or colors.white
    local pupilSize = 3

    if eye.emotion == "SCARED" then
        pupilSize = math.floor(pupilSize * 0.7)
    elseif eye.emotion == "ANGRY" then
        irisColor = colors.red
    elseif eye.emotion == "SAD" or eye.emotion == "CRYING" then
        irisColor = colors.blue
        pupilSize = 4
    end

    local lookX = eye.lookX * 10
    local lookY = eye.lookY * 6

    -- Íris
    for y = -6, 6 do
        for x = -8, 8 do
            if (x*x)/64 + (y*y)/36 <= 1 then
                if mon and mon.setBackgroundColor and mon.setCursorPos and mon.write then
                    mon.setBackgroundColor(irisColor)
                    mon.setCursorPos(centerX + x + lookX, centerY + y + lookY)
                    mon.write(" ")
                end
            end
        end
    end

    -- Pupila
    for y = -pupilSize, pupilSize do
        for x = -pupilSize, pupilSize do
            if (x*x)/(pupilSize*pupilSize) + (y*y)/(pupilSize*pupilSize) <= 1 then
                if mon and mon.setBackgroundColor and mon.setCursorPos and mon.write then
                    mon.setBackgroundColor(colors.black)
                    mon.setCursorPos(centerX + x + lookX, centerY + y + lookY)
                    mon.write(" ")
                end
            end
        end
    end
end

local function drawTears()
    if not settings.emotions[eye.emotion].tearful then return end

    eye.waterLevel = math.min(10, eye.waterLevel + 0.1)

    for _, t in ipairs(eye.tears) do
        if t.active then
            t.y = t.y + t.speed
            if t.y > 30 then
                t.active = false
            end
        elseif math.random() < 0.08 * eye.waterLevel/10 then
            t.active = true
            t.x = math.random(-30, 30)
            t.y = -25
            t.speed = math.random(2, 5)
            t.size = math.random(1, 3)
            t.bright = math.random() < 0.3
        end
    end

    for _, t in ipairs(eye.tears) do
        if t.active and mon and mon.setBackgroundColor and mon.setCursorPos and mon.write then
            local tearColor = t.bright and colors.lightBlue or colors.blue
            for i = 0, t.size do
                mon.setBackgroundColor(tearColor)
                mon.setCursorPos(centerX + t.x, centerY + t.y + i)
                mon.write(" ")
            end
        end
    end

    if eye.waterLevel > 5 then
        for y = -5, 5 do
            for x = -10, 10 do
                if (x*x)/100 + (y*y)/25 <= 1 and math.random() < 0.15 * eye.waterLevel/10 then
                    if mon and mon.setBackgroundColor and mon.setCursorPos and mon.write then
                        mon.setBackgroundColor(colors.white)
                        mon.setCursorPos(centerX + x, centerY + y)
                        mon.write(" ")
                    end
                end
            end
        end
    end
end

local function updateEye()
    if not eye.timer then eye.timer = 0 end
    eye.timer = eye.timer - 1
    if eye.timer <= 0 then
        local emotions = {"NORMAL", "ANGRY", "STRESSED", "SCARED", "SAD", "CRYING"}
        local weights = {50, 10, 15, 10, 10, 5}
        local total = 0
        for _, w in ipairs(weights) do total = total + w end
        
        local r = math.random(total)
        local sum = 0
        for i, w in ipairs(weights) do
            sum = sum + w
            if r <= sum then
                setEmotion(emotions[i])
                break
            end
        end
    end

    if math.random() < (settings.emotions[eye.emotion].blink or 0.01) then
        eye.blink = 0.3
    end
    if eye.blink > 0 then
        eye.blink = eye.blink - 0.03
        if eye.blink < 0 then eye.blink = 0 end
    end

    if math.random() < 0.05 then
        if eye.emotion == "SCARED" then
            eye.lookX = eye.lookX * 0.5 + (math.random() * 2 - 1) * 0.5
            eye.lookY = eye.lookY * 0.5 + (math.random() * 2 - 1) * 0.5
        elseif eye.emotion == "ANGRY" then
            eye.lookX = eye.lookX * 0.8 + (math.random() - 0.5) * 0.4
            eye.lookY = eye.lookY * 0.8 + (math.random() - 0.5) * 0.4
        else
            eye.lookX = eye.lookX * 0.7 + (math.random() * 2 - 1) * 0.3
            eye.lookY = eye.lookY * 0.7 + (math.random() * 2 - 1) * 0.3
        end
    end

    eye.colorIndex = (math.floor(os.epoch() / 500) % #settings.colors + 1
    
    if eye.currentBgEffect and eye.currentBgEffect.update then
        eye.currentBgEffect:update()
    end
end

-- Loop principal com tratamento de erros
while true do
    local ok, err = pcall(function()
        if mon and mon.setBackgroundColor and mon.clear then
            mon.setBackgroundColor(colors.black)
            mon.clear()
        end
        
        updateEye()
        
        if eye.currentBgEffect and eye.currentBgEffect.draw then
            eye.currentBgEffect:draw()
        end
        
        drawSclera()
        drawIris()
        drawTears()
    end)
    
    if not ok then
        print("Erro no loop principal: " .. tostring(err))
    end
    
    sleep(0.1)
end
