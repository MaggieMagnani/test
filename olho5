-- olho_gigante_v2.lua

local mon
for _, nome in ipairs(peripheral.getNames()) do
  if peripheral.getType(nome) == "monitor" then
    mon = peripheral.wrap(nome)
    break
  end
end

if not mon then
  print("Nenhum monitor encontrado!")
  return
end

-- Dobrar o tamanho do olho: aumentar escala e ajustar centro
mon.setTextScale(0.5) -- mantém a escala, vamos desenhar maior no código
local w, h = mon.getSize()
local cx, cy = math.floor(w / 2), math.floor(h / 2)

-- Cores vibrantes
local cores = {
  colors.red, colors.orange, colors.yellow,
  colors.lime, colors.green, colors.blue,
  colors.cyan, colors.purple, colors.pink, colors.magenta
}

-- Emoções
local emocion_cor = {
  bravo = colors.red,
  triste = colors.blue,
  assustado = colors.white,
}

-- Posições para o movimento da íris (aumentadas proporcionalmente)
local posicoes = {
  {x = 0, y = 0}, {x = -6, y = 0}, {x = 6, y = 0},
  {x = 0, y = -4}, {x = 0, y = 4},
  {x = -4, y = -2}, {x = 4, y = -2},
  {x = -4, y = 2}, {x = 4, y = 2}
}

-- Desenha o olho maior, com base no dobro do tamanho original
local function desenharOlho(offsetX, offsetY, cor, emoc)
  mon.setBackgroundColor(colors.black)
  mon.clear()

  -- Esclera (dobrado, elipse maior)
  for y = -14, 14 do
    for x = -26, 26 do
      if (x * x) / 676 + (y * y) / 196 <= 1 then
        mon.setCursorPos(cx + x, cy + y)
        mon.setBackgroundColor(colors.white)
        mon.write(" ")
      end
    end
  end

  -- Íris (dobrada)
  for y = -8, 8 do
    for x = -12, 12 do
      if (x * x) / 144 + (y * y) / 64 <= 1 then
        mon.setCursorPos(cx + x + offsetX, cy + y + offsetY)
        mon.setBackgroundColor(cor)
        mon.write(" ")
      end
    end
  end

  -- Pupila (dobrada)
  for y = -2, 2 do
    for x = -2, 2 do
      mon.setCursorPos(cx + x + offsetX, cy + y + offsetY)
      mon.setBackgroundColor(colors.black)
      mon.write(" ")
    end
  end

  -- Emotions:
  if emoc == "bravo" then
    -- contorno vermelho mais forte em cima da esclera
    for x = -26, 26 do
      mon.setCursorPos(cx + x, cy - 14)
      mon.setBackgroundColor(colors.red)
      mon.write(" ")
    end
  elseif emoc == "triste" then
    -- lágrimas caindo (pequenos pontos azuis abaixo da esclera)
    local lagrimas = {
      {x = -8, y = 15},
      {x = 0, y = 16},
      {x = 8, y = 15}
    }
    for _, p in ipairs(lagrimas) do
      mon.setCursorPos(cx + p.x, cy + p.y)
      mon.setBackgroundColor(colors.blue)
      mon.write(" ")
    end
  elseif emoc == "assustado" then
    -- íris retraída: menor e mais centralizada
    -- Apagar íris grande para desenhar menor
    for y = -8, 8 do
      for x = -12, 12 do
        mon.setCursorPos(cx + x + offsetX, cy + y + offsetY)
        mon.setBackgroundColor(colors.white)
        mon.write(" ")
      end
    end
    -- desenhar íris pequena e branca com contorno preto (assustado)
    for y = -3, 3 do
      for x = -3, 3 do
        mon.setCursorPos(cx + x + offsetX, cy + y + offsetY)
        mon.setBackgroundColor(colors.lightGray)
        mon.write(" ")
      end
    end
    for y = -1, 1 do
      for x = -1, 1 do
        mon.setCursorPos(cx + x + offsetX, cy + y + offsetY)
        mon.setBackgroundColor(colors.black)
        mon.write(" ")
      end
    end
  end
end

-- Efeito visual tipo equalizador (dura ~10s, raramente aparece)
local function efeitoEqualizador()
  local duracao = 10 -- segundos
  local start = os.clock()
  while os.clock() - start < duracao do
    -- Apagar monitor antes de desenhar barras
    mon.setBackgroundColor(colors.black)
    mon.clear()

    local bar_count = 20
    local max_height = h - 2
    for i = 1, bar_count do
      local altura = math.random(1, max_height)
      local cor = cores[math.random(#cores)]
      for y = h, h - altura + 1, -1 do
        mon.setCursorPos(i * 3, y)
        mon.setBackgroundColor(cor)
        mon.write(" ")
      end
    end

    sleep(0.15)
  end
  -- Depois de terminar o efeito, limpa para voltar ao olho
  mon.setBackgroundColor(colors.black)
  mon.clear()
end

-- Função para escolher emoção com baixa frequência
local function escolherEmocao()
  local chance = math.random()
  if chance < 0.05 then
    -- 5% chance de emoção aparecer
    local emos = {"bravo", "triste", "assustado"}
    return emos[math.random(#emos)]
  end
  return nil
end

-- Loop principal
local emoc_atual = nil
local emoc_timer = 0

while true do
  -- Controla duração da emoção
  if emoc_atual then
    emoc_timer = emoc_timer - 0.4
    if emoc_timer <= 0 then
      emoc_atual = nil
    end
  else
    emoc_atual = escolherEmocao()
    if emoc_atual then
      emoc_timer = 30 + math.random(10) -- 30-40 segundos
    end
  end

  -- Efeito equalizador raro (2% chance a cada ciclo)
  if math.random() < 0.02 and not emoc_atual then
    efeitoEqualizador()
  else
    -- Movimento normal da íris
    local pupila = posicoes[math.random(#posicoes)]
    local cor = cores[math.random(#cores)]
    desenharOlho(pupila.x, pupila.y, cor, emoc_atual)
    sleep(0.4 + math.random())
  end
end
